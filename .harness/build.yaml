pipeline:
  name: build
  identifier: build
  projectIdentifier: DotNetPipeline
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.Github_OAuth_1704192628541
        repoName: anujrajkumar/DotNetDemo1
        build: <+input>
  stages:
    - stage:
        name: build
        identifier: build
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: build
                  identifier: build
                  spec:
                    shell: Sh
                    command: |-
                      # Restore and build the solution
                      dotnet restore TodoistApp.sln
                      dotnet build

                      # Run tests and capture the exit code
                      dotnet test || TEST_EXIT_CODE=$?

                      # # If the variable is not set, set it to 0 (meaning all tests passed)
                      # TEST_EXIT_CODE=${TEST_EXIT_CODE:-0}

                      # Debug: Print the exit code
                      echo "Test exit code: $TEST_EXIT_CODE"

                      # Conditional statements based on the exit code
                      if [ $TEST_EXIT_CODE -eq 0 ]; then
                        echo "All tests passed. Proceeding to publish..."
                        dotnet publish --configuration Release --output ./published
                      elif [ $TEST_EXIT_CODE -eq 1 ]; then
                        echo "Some tests failed, but proceeding to publish..."
                        dotnet publish --configuration Release --output ./published
                      else
                        echo "Critical error in tests. Stopping pipeline."
                        exit $TEST_EXIT_CODE
                      fi

                      # Compress the published artifacts
                      # zip -r published_artifacts.zip ./published

                      # List the directory contents
                      ls -ltr

                      # Rename the zip file
                      # temp=$(find . -name '*.zip')
                      # zip="published_artifacts.101.zip"
                      # mv "$temp" "$zip"

                      # # Export the zip file name
                      # export ZipFileName=$zip
                      # echo "Zip file name: $ZipFileName"
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Ignore
              - step:
                  type: Run
                  name: Zip and Push
                  identifier: Zip_and_Push
                  spec:
                    shell: Sh
                    command: |-
                      # Compress the published artifacts
                      zip -r published_artifacts.zip ./published

                      # List the directory contents
                      ls -ltr

                      # Rename the zip file
                      temp=$(find . -name '*.zip')
                      # zip="published_artifacts.101.zip"
                      echo "<+codebase.commitSha>"
                      zip='<+codebase.commitSha>.zip'
                      mv "$temp" "$zip"

                      # Export the zip file name
                      export ZipFileName=$zip
                      echo "Zip file name: $ZipFileName"
